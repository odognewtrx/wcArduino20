#include "Arduino.h"
#include <SPI.h>
#include <RF24.h>
#include <Wire.h>

// This is just the way the RF24 library works:
// Hardware configuration: Set up nRF24L01 radio on SPI bus (pins 11, 12, 13) plus pins CE & CSN:
RF24 radio(9, 10);  // CE and CSN

byte addresses[][6] = {"1Node", "2Node"};

// -----------------------------
//  I2C Interface
//
uint8_t cmdToRun = 0;
uint8_t sensorValue;

// ------------------------------
// LED Patterns and pin order
//
#define NUM_LEDS 7
uint8_t ledOrder[NUM_LEDS] =      {   2,    3,    4,    5,    6,    7,    8};
uint8_t positionPat_0[NUM_LEDS] = {HIGH,  LOW,  LOW,  LOW,  LOW,  LOW,  LOW};
uint8_t positionPat_1[NUM_LEDS] = {HIGH, HIGH,  LOW,  LOW,  LOW,  LOW,  LOW};
uint8_t positionPat_2[NUM_LEDS] = { LOW, HIGH, HIGH,  LOW,  LOW,  LOW,  LOW};
uint8_t positionPat_3[NUM_LEDS] = { LOW, HIGH, HIGH, HIGH,  LOW,  LOW,  LOW};
uint8_t positionPat_4[NUM_LEDS] = { LOW, HIGH, HIGH, HIGH, HIGH,  LOW,  LOW};
uint8_t positionPat_5[NUM_LEDS] = { LOW, HIGH, HIGH, HIGH, HIGH, HIGH,  LOW};
uint8_t positionPat_6[NUM_LEDS] = { LOW,  LOW,  LOW,  LOW,  LOW,  LOW, HIGH};
uint8_t errorPat[NUM_LEDS] =      {HIGH,  LOW, HIGH,  LOW, HIGH,  LOW, HIGH};
uint8_t moveOpnPat[NUM_LEDS] =    { LOW,  LOW,  LOW,  LOW, HIGH, HIGH, HIGH};
uint8_t moveClsPat[NUM_LEDS] =    {HIGH, HIGH, HIGH,  LOW,  LOW,  LOW,  LOW};

#define NUM_PATT 7
uint8_t sensorLims[NUM_PATT] =    {   1,   51,  102,  153,  204,  255,  255};
uint8_t * positionPat[NUM_PATT] = {positionPat_0, positionPat_1, positionPat_2, positionPat_3,
                                   positionPat_4, positionPat_5, positionPat_6};

void setLeds(uint8_t *patt) {for (int i=0; i<NUM_LEDS; i++) digitalWrite(ledOrder[i], patt[i]);}

void setPositionLeds(uint8_t val) {
  int j;
  for (j=0; j<NUM_PATT-1; j++) {
    if ( val < sensorLims[j] ) {
      setLeds( positionPat[j] );
      j = NUM_PATT;   // exit function
    }
  }
  // fall through the for loop test
  if (j == NUM_PATT-1 ) setLeds( positionPat[j] );
}

void setErrorLeds() { setLeds( errorPat ); }

// Function that executes whenever data is received from master
void receiveEvent(int howMany) {
  while (Wire.available()) { // loop through all but the last
    uint8_t c = Wire.read();    // receive byte as a character
    if ( c == 1 ) cmdToRun = 55;
    if ( c == 0 ) cmdToRun = 66;
  }
}

void requestEvent() {
  Wire.write(&sensorValue, 1);
}


// -----------------------------------------------------------------------------
// SETUP   SETUP   SETUP   SETUP   SETUP   SETUP   SETUP   SETUP   SETUP
// -----------------------------------------------------------------------------
void setup() {

  Serial.begin(9600);
  Serial.println("THIS IS THE TRANSMITTER CODE - YOU NEED THE OTHER ARDIUNO TO SEND BACK A RESPONSE");

  // Join I2C bus as slave with address 8
  Wire.begin(0x8);

  // Initiate the radio object
  radio.begin();

  // Display LEDs
  for (int i=0; i<NUM_LEDS; i++) pinMode(i, OUTPUT);
          
  // Set the transmit power to lowest available to prevent power supply related issues
  radio.setPALevel(RF24_PA_MIN);

  // Set the speed of the transmission to the quickest available
  radio.setDataRate(RF24_2MBPS);

  // Use a channel unlikely to be used by Wifi, Microwave ovens etc
  radio.setChannel(124);

  // Open a writing and reading pipe on each radio, with opposite addresses
  radio.openWritingPipe(addresses[1]);
  radio.openReadingPipe(1, addresses[0]);

  // Random number seeding (we're going to be sending a single random number)
  randomSeed(analogRead(A0));

  // Call receiveEvent when data received                
  Wire.onReceive(receiveEvent);
  Wire.onRequest(requestEvent); // register event

}

// -----------------------------------------------------------------------------
// LOOP     LOOP     LOOP     LOOP     LOOP     LOOP     LOOP     LOOP     LOOP
// -----------------------------------------------------------------------------
void loop() {

  // Generate a single random character to transmit or send the command
  unsigned char data;
  if (cmdToRun > 0) data = cmdToRun;
  else              data = random(0, 254);   // Will be a dflt command
  //unsigned char data = random(0, 254);
    
  // Ensure we have stopped listening (even if we're not) or we won't be able to transmit
  radio.stopListening(); 

  // Did we manage to SUCCESSFULLY transmit that (by getting an acknowledgement back from the other Arduino)?
  // Even we didn't we'll continue with the sketch, you never know, the radio fairies may help us
  if (!radio.write( &data, sizeof(unsigned char) )) {
    Serial.println("No acknowledgement of transmission - receiving radio device connected?");    
  }

  if (cmdToRun == 55) {setLeds( moveOpnPat ); delay(500); }
  if (cmdToRun == 66) {setLeds( moveClsPat ); delay(500); }

  // Now listen for a response
  radio.startListening();
  
  // But we won't listen for long, 200 milliseconds is enough
  unsigned long started_waiting_at = millis();

  // Loop here until we get indication that some data is ready for us to read (or we time out)
  while ( ! radio.available() ) {

    // Oh dear, no response received within our timescale
    if (millis() - started_waiting_at > 200 ) {
      Serial.println("No response received - timeout!");
      return;
    }
  }

  // Now read the data that is waiting for us in the nRF24L01's buffer
  unsigned char dataRx;
  radio.read( &dataRx, sizeof(unsigned char) );

  // Show user what we sent and what we got back
  Serial.print("Sent: ");
  Serial.print(data);
  Serial.print(", received: ");
  Serial.println(dataRx);

  sensorValue = dataRx;
  cmdToRun = 0;

  // Try again 1s later
  delay(1000);
  setPositionLeds(sensorValue);
}
